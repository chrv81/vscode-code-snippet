{
	// EXPRESS JS SNIPPETS
	"ExpressJS Router Template": {
			"scope": "javascript,typescript",
			"prefix": "xrouter",
			"body": [
					"import express from 'express';",
					"import { ${1:module}Controller } from '../controllers/${1:module}.controller';",
					"",
					"const ${1:module}Router = express.Router();",
					"",
					"// T·∫°o route CRUD",
					"${1:module}Router.post('/', ${1:module}Controller.create);",
					"${1:module}Router.get('/', ${1:module}Controller.findAll);",
					"${1:module}Router.get('/:id', ${1:module}Controller.findOne);",
					"${1:module}Router.patch('/:id', ${1:module}Controller.update);",
					"${1:module}Router.delete('/:id', ${1:module}Controller.remove);",
					"",
					"export default ${1:module}Router;"
			],
			"description": "Create an Express.js router with standard CRUD routes"
	},
	"ExpressJS Controller Template": {
			"scope": "javascript,typescript",
			"prefix": "xcontroller",
			"body": [
					"import { ${1:module}Service } from '../services/${1:module}.service';",
					"import { responseSuccess } from '../common/helpers/response.helpers';",
					"",
					"export const ${1:module}Controller = {",
					"  create: async (req, res, next) => {",
					"    const result = await ${1:module}Service.create(req);",
					"    const response = responseSuccess(result, `Create ${1:module} successfully`);",
					"    res.status(response.statusCode).json(response);",
					"  },",
					"",
					"  findAll: async (req, res, next) => {",
					"    const result = await ${1:module}Service.findAll(req);",
					"    const response = responseSuccess(result, `Get all ${1:module}s successfully`);",
					"    res.status(response.statusCode).json(response);",
					"  },",
					"",
					"  findOne: async (req, res, next) => {",
					"    const result = await ${1:module}Service.findOne(req);",
					"    const response = responseSuccess(result, `Get ${1:module} #\\${req.params.id} successfully`);",
					"    res.status(response.statusCode).json(response);",
					"  },",
					"",
					"  update: async (req, res, next) => {",
					"    const result = await ${1:module}Service.update(req);",
					"    const response = responseSuccess(result, `Update ${1:module} #\\${req.params.id} successfully`);",
					"    res.status(response.statusCode).json(response);",
					"  },",
					"",
					"  remove: async (req, res, next) => {",
					"    const result = await ${1:module}Service.remove(req);",
					"    const response = responseSuccess(result, `Remove ${1:module} #\\${req.params.id} successfully`);",
					"    res.status(response.statusCode).json(response);",
					"  },",
					"};"
			],
			"description": "Create an Express.js controller with standard CRUD methods"
	},
	"ExpressJS Service Template": {
		"scope": "javascript,typescript",
		"prefix": "xservice",
		"body": [
			"export const ${1:module}Service = {",
			"  create: async (req) => {",
			"    return `This action create`;",
			"  },",
			"",
			"  findAll: async (req) => {",
			"    return `This action returns all ${1:module}`;",
			"  },",
			"",
			"  findOne: async (req) => {",
			"    return `This action returns a id: \\${req.params.id} ${1:module}`;",
			"  },",
			"",
			"  update: async (req) => {",
			"    return `This action updates a id: \\${req.params.id} ${1:module}`;",
			"  },",
			"",
			"  remove: async (req) => {",
			"    return `This action removes a id: \\${req.params.id} ${1:module}`;",
			"  },",
			"};"
		],
		"description": "Create an Express.js service with standard CRUD methods"
	},
	"ExpressJS Root Router": {
		"scope": "javascript,typescript",
		"prefix": "xrootrouter",
		"body": [
			"import express from 'express';",
			"",
			"const ${1:root}Router = express.Router();",
			"",
			"export default ${1:root}Router;"
		],
		"description": "Create a basic Express.js router"
	},
	"ExpressJS Status Codes Utility": {
		"scope": "javascript,typescript",
		"prefix": "xapistatus",
		"body": [
			"export const statusCodes = {",
			"  // 1xx Informational",
			"  CONTINUE: 100,",
			"  SWITCHING_PROTOCOLS: 101,",
			"  PROCESSING: 102,",
			"",
			"  // 2xx Success",
			"  OK: 200,",
			"  CREATED: 201,",
			"  ACCEPTED: 202,",
			"  NON_AUTHORITATIVE_INFORMATION: 203,",
			"  NO_CONTENT: 204,",
			"  RESET_CONTENT: 205,",
			"  PARTIAL_CONTENT: 206,",
			"  MULTI_STATUS: 207,",
			"",
			"  // 3xx Redirection",
			"  MULTIPLE_CHOICES: 300,",
			"  MOVED_PERMANENTLY: 301,",
			"  MOVED_TEMPORARILY: 302,",
			"  SEE_OTHER: 303,",
			"  NOT_MODIFIED: 304,",
			"  USE_PROXY: 305, // Deprecated",
			"  TEMPORARY_REDIRECT: 307,",
			"  PERMANENT_REDIRECT: 308,",
			"",
			"  // 4xx Client Errors",
			"  BAD_REQUEST: 400,",
			"  UNAUTHORIZED: 401,",
			"  PAYMENT_REQUIRED: 402,",
			"  FORBIDDEN: 403,",
			"  NOT_FOUND: 404,",
			"  METHOD_NOT_ALLOWED: 405,",
			"  NOT_ACCEPTABLE: 406,",
			"  PROXY_AUTHENTICATION_REQUIRED: 407,",
			"  REQUEST_TIMEOUT: 408,",
			"  CONFLICT: 409,",
			"  GONE: 410,",
			"  LENGTH_REQUIRED: 411,",
			"  PRECONDITION_FAILED: 412,",
			"  REQUEST_TOO_LONG: 413,",
			"  REQUEST_URI_TOO_LONG: 414,",
			"  UNSUPPORTED_MEDIA_TYPE: 415,",
			"  REQUESTED_RANGE_NOT_SATISFIABLE: 416,",
			"  EXPECTATION_FAILED: 417,",
			"  IM_A_TEAPOT: 418,",
			"  INSUFFICIENT_SPACE_ON_RESOURCE: 419,",
			"  METHOD_FAILURE: 420,",
			"  MISDIRECTED_REQUEST: 421,",
			"  UNPROCESSABLE_ENTITY: 422,",
			"  LOCKED: 423,",
			"  FAILED_DEPENDENCY: 424,",
			"  PRECONDITION_REQUIRED: 428,",
			"  TOO_MANY_REQUESTS: 429,",
			"  REQUEST_HEADER_FIELDS_TOO_LARGE: 431,",
			"  UNAVAILABLE_FOR_LEGAL_REASONS: 451,",
			"",
			"  // 5xx Server Errors",
			"  INTERNAL_SERVER_ERROR: 500,",
			"  NOT_IMPLEMENTED: 501,",
			"  BAD_GATEWAY: 502,",
			"  SERVICE_UNAVAILABLE: 503,",
			"  GATEWAY_TIMEOUT: 504,",
			"  HTTP_VERSION_NOT_SUPPORTED: 505,",
			"  INSUFFICIENT_STORAGE: 507,",
			"  NETWORK_AUTHENTICATION_REQUIRED: 511,",
			"};"
		],
		"description": "HTTP status codes utility with clean comments"
	},
	"ExpressJS Exception Utility": {
		"scope": "javascript,typescript",
		"prefix": "xception",
		"body": [
			"// 400 - Bad Request",
			"export class BadRequestException extends Error {",
			"  constructor(message = 'Bad Request Exception') {",
			"    super(message);",
			"    this.code = 400;",
			"  }",
			"}",
			"",
			"// 403 - Forbidden (refresh-token required)",
			"export class ForbiddenException extends Error {",
			"  constructor(message = 'Forbidden Exception') {",
			"    super(message);",
			"    this.code = 403;",
			"  }",
			"}",
			"",
			"// 401 - Unauthorized (logout required)",
			"export class UnauthorizedException extends Error {",
			"  constructor(message = 'Unauthorized Exception') {",
			"    super(message);",
			"    this.code = 401;",
			"  }",
			"}"
		],
		"description": "Custom exception classes for HTTP errors"
	},
	"ExpressJS Response Utility": {
		"scope": "javascript,typescript",
		"prefix": "xponse",
		"body": [
			"// Success response helper",
			"export const responseSuccess = (data, message = 'Success', code = 200) => {",
			"  return {",
			"    status: 'success',",
			"    statusCode: code,",
			"    message,",
			"    data,",
			"  };",
			"};",
			"",
			"// Error response helper",
			"export const responseError = (",
			"  error,",
			"  message = 'Internal Server Error',",
			"  code = 500,",
			"  stack = null",
			") => {",
			"  return {",
			"    status: 'error',",
			"    statusCode: code,",
			"    message,",
			"    error: error instanceof Error ? error.message : error,",
			"    stack,",
			"  };",
			"};"
		],
		"description": "Response utility functions for success and error responses"
	},
	"ExpressJS Google OAuth 2.0 Passport Strategy": {
    "scope": "javascript,typescript",
    "prefix": "xgooglepassport",
    "body": [
      "import passport from 'passport';",
      "import prisma from '../prisma/init.prisma';",
      "import { Strategy as GoogleStrategy } from 'passport-google-oauth20';",
      "import {",
      "  GOOGLE_CLIENT_ID,",
      "  GOOGLE_CLIENT_SECRET,",
      "  GOOGLE_CLIENT_URI_CALLBACK,",
      "} from '../constants/app.constant';",
      "import { tokenService } from '../../services/token.service';",
      "",
      "export const initGoogleAuth20 = () => {",
      "  passport.use(",
      "    new GoogleStrategy(",
      "      {",
      "        clientID: GOOGLE_CLIENT_ID,",
      "        clientSecret: GOOGLE_CLIENT_SECRET,",
      "        callbackURL: GOOGLE_CLIENT_URI_CALLBACK,",
      "      },",
      "      async (accessToken, refreshToken, profile, cb) => {",
      "        try {",
      "          console.log('üîÑ [GoogleAuth] Verifying profile:', profile?.id);",
      "",
      "          const googleId = profile?.id ?? '';",
      "          const displayName = profile?.displayName ?? '';",
      "          const email = profile?.emails?.[0]?.value ?? '';",
      "          const verifiedEmail = profile?.emails?.[0]?.verified ?? false;",
      "          const photo = profile?.photos?.[0]?.value ?? '';",
      "",
      "          if (!email) {",
      "            console.log('‚ùå [GoogleAuth] No email found in profile');",
      "            return cb(new Error('No email found'), null);",
      "          }",
      "",
      "          if (!verifiedEmail) {",
      "            console.log('‚ùå [GoogleAuth] Email not verified:', email);",
      "            return cb(new Error('Email not verified'), null);",
      "          }",
      "",
      "          let user = await prisma.users.findUnique({",
      "            where: { email },",
      "          });",
      "",
      "          if (!user) {",
      "            console.log('‚ûï [GoogleAuth] Creating new user:', email);",
      "            user = await prisma.users.create({",
      "              data: {",
      "                email,",
      "                avatar: photo,",
      "                fullName: displayName,",
      "                googleId,",
      "              },",
      "            });",
      "          } else {",
      "            console.log('‚úÖ [GoogleAuth] Found existing user:', user.id);",
      "          }",
      "",
      "          const tokens = tokenService.createTokens(user.id);",
      "          return cb(null, { user, tokens });",
      "        } catch (error) {",
      "          console.error('‚ùå [GoogleAuth] Error:', error);",
      "          return cb(error, null);",
      "        }",
      "      }",
      "    )",
      "  );",
      "};"
    ],
    "description": "Google OAuth 2.0 Passport strategy with Prisma and JWT"
  },
	"ExpressJS Nodemailer Utility": {
    "scope": "javascript,typescript",
    "prefix": "xnodemailer",
    "body": [
      "import dotenv from 'dotenv/config';",
      "import nodemailer from 'nodemailer';",
      "",
      "const transporter = nodemailer.createTransport({",
      "  host: 'smtp.gmail.com',",
      "  port: 587,",
      "  secure: false,",
      "  auth: {",
      "    user: process.env.GMAIL_USER,",
      "    pass: process.env.GMAIL_PASS,",
      "  },",
      "});",
      "",
      "export const sendMail = async ({",
      "  to,",
      "  subject = 'C·∫£nh b√°o b·∫£o m·∫≠t',",
      "  text = 'T√†i kho·∫£n c√≥ l∆∞·ª£t ƒëƒÉng nh·∫≠p m·ªõi',",
      "  html = '<b>T√†i kho·∫£n c√≥ l∆∞·ª£t ƒëƒÉng nh·∫≠p m·ªõi</b>',",
      "  from = process.env.GMAIL_USER,",
      "}) => {",
      "  try {",
      "    console.log('üìß Attempting to send email to:', to);",
      "",
      "    const info = await transporter.sendMail({",
      "      from,",
      "      to,",
      "      subject,",
      "      text,",
      "      html,",
      "    });",
      "",
      "    console.log('‚úÖ Email sent successfully:', info.messageId);",
      "    return info;",
      "  } catch (error) {",
      "    console.error('‚ùå Email sending failed:', error);",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Reusable Nodemailer utility for sending emails"
  },
	"ExpressJS MySQL2 Pool Utility": {
    "scope": "javascript,typescript",
    "prefix": "xmysql2",
    "body": [
      "import mysql from 'mysql2/promise';",
      "import { DATABASE_URL } from '../constants/app.constant';",
      "",
      "// Create the connection pool with detailed settings",
      "const pool = mysql.createPool({",
      "  uri: DATABASE_URL, // Connection string for MySQL",
      "  waitForConnections: true, // Queue connection requests if all connections are in use",
      "  connectionLimit: 10, // Maximum number of connections in the pool",
      "  maxIdle: 10, // Maximum number of idle connections",
      "  idleTimeout: 60000, // Idle connection timeout in milliseconds",
      "  queueLimit: 0, // Maximum number of queued connection requests (0 = unlimited)",
      "  enableKeepAlive: true, // Enable TCP keep-alive on connections",
      "  keepAliveInitialDelay: 0, // Initial delay before TCP keep-alive probes",
      "  timezone: 'Z', // Set timezone to UTC",
      "  multipleStatements: false, // Allow multiple SQL statements per query",
      "  ssl: undefined, // SSL configuration (set to object for SSL)",
      "});",
      "",
      "try {",
      "  await pool.query('SELECT 1+1 AS result');",
      "  console.info('MYSQL2: \\t Connection successfully');",
      "} catch (error) {",
      "  console.error('MYSQL2: \\t Error connecting to MySQL2:', error);",
      "}",
      "",
      "export default pool;"
    ],
    "description": "Create a MySQL2 connection pool with detailed field comments"
  }
}
