{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Express Router Template": {
		"scope": "javascript,typescript",
		"prefix": "xrouter",
		"body": [
			"import express from 'express';",
			"",
			"const ${1:module}Router = express.Router();",
			"",
			"// Táº¡o route CRUD",
			"${1:module}Router.post('/', ${1:module}Controller.create);",
			"${1:module}Router.get('/', ${1:module}Controller.findAll);",
			"${1:module}Router.get('/:id', ${1:module}Controller.findOne);",
			"${1:module}Router.patch('/:id', ${1:module}Controller.update);",
			"${1:module}Router.delete('/:id', ${1:module}Controller.remove);",
			"",
			"export default ${1:module}Router;"
		],
		"description": "Create an Express.js router with standard CRUD routes"
	},
	"Express Controller Template": {
		"scope": "javascript,typescript",
		"prefix": "xcontroller",
		"body": [
			"export const ${1:module}Controller = {",
			"  create: async function (req, res, next) {",
			"    const result = await ${2:${1:module}Service}.create(req);",
			"    const response = ${3:responseSuccess}(result, `Create ${1:module} successfully`);",
			"    res.status(response.statusCode).json(response);",
			"  },",
			"",
			"  findAll: async function (req, res, next) {",
			"    const result = await ${1:module}Service.findAll(req);",
			"    const response = responseSuccess(result, `Get all ${1:module}s successfully`);",
			"    res.status(response.statusCode).json(response);",
			"  },",
			"",
			"  findOne: async function (req, res, next) {",
			"    const result = await ${1:module}Service.findOne(req);",
			"    const response = responseSuccess(result, `Get ${1:module} #\\${req.params.id} successfully`);",
			"    res.status(response.statusCode).json(response);",
			"  },",
			"",
			"  update: async function (req, res, next) {",
			"    const result = await ${1:module}Service.update(req);",
			"    const response = responseSuccess(result, `Update ${1:module} #\\${req.params.id} successfully`);",
			"    res.status(response.statusCode).json(response);",
			"  },",
			"",
			"  remove: async function (req, res, next) {",
			"    const result = await ${1:module}Service.remove(req);",
			"    const response = responseSuccess(result, `Remove ${1:module} #\\${req.params.id} successfully`);",
			"    res.status(response.statusCode).json(response);",
			"  },",
			"};"
		],
		"description": "Create an Express.js controller with standard CRUD methods"
	},
	"Express Service Template": {
		"scope": "javascript,typescript",
		"prefix": "xservice",
		"body": [
			"export const ${1:module}Service = {",
			"  create: async function (req) {",
			"    return `This action create`;",
			"  },",
			"",
			"  findAll: async function (req) {",
			"    return `This action returns all ${1:module}`;",
			"  },",
			"",
			"  findOne: async function (req) {",
			"    return `This action returns a id: \\${req.params.id} ${1:module}`;",
			"  },",
			"",
			"  update: async function (req) {",
			"    return `This action updates a id: \\${req.params.id} ${1:module}`;",
			"  },",
			"",
			"  remove: async function (req) {",
			"    return `This action removes a id: \\${req.params.id} ${1:module}`;",
			"  },",
			"};"
		],
		"description": "Create an Express.js service with standard CRUD methods"
	},
	"Express Root Router": {
		"scope": "javascript,typescript",
		"prefix": "xrootrouter",
		"body": [
			"import express from 'express';",
			"",
			"const ${1:root}Router = express.Router();",
			"",
			"export default ${1:root}Router;"
		],
		"description": "Create a basic Express.js router"
	},
	"Status Codes Utility": {
		"scope": "javascript,typescript",
		"prefix": "xapistatus",
		"body": [
			"export const statusCodes = {",
			"  // 1xx Informational",
			"  CONTINUE: 100,",
			"  SWITCHING_PROTOCOLS: 101,",
			"  PROCESSING: 102,",
			"",
			"  // 2xx Success",
			"  OK: 200,",
			"  CREATED: 201,",
			"  ACCEPTED: 202,",
			"  NON_AUTHORITATIVE_INFORMATION: 203,",
			"  NO_CONTENT: 204,",
			"  RESET_CONTENT: 205,",
			"  PARTIAL_CONTENT: 206,",
			"  MULTI_STATUS: 207,",
			"",
			"  // 3xx Redirection",
			"  MULTIPLE_CHOICES: 300,",
			"  MOVED_PERMANENTLY: 301,",
			"  MOVED_TEMPORARILY: 302,",
			"  SEE_OTHER: 303,",
			"  NOT_MODIFIED: 304,",
			"  USE_PROXY: 305, // Deprecated",
			"  TEMPORARY_REDIRECT: 307,",
			"  PERMANENT_REDIRECT: 308,",
			"",
			"  // 4xx Client Errors",
			"  BAD_REQUEST: 400,",
			"  UNAUTHORIZED: 401,",
			"  PAYMENT_REQUIRED: 402,",
			"  FORBIDDEN: 403,",
			"  NOT_FOUND: 404,",
			"  METHOD_NOT_ALLOWED: 405,",
			"  NOT_ACCEPTABLE: 406,",
			"  PROXY_AUTHENTICATION_REQUIRED: 407,",
			"  REQUEST_TIMEOUT: 408,",
			"  CONFLICT: 409,",
			"  GONE: 410,",
			"  LENGTH_REQUIRED: 411,",
			"  PRECONDITION_FAILED: 412,",
			"  REQUEST_TOO_LONG: 413,",
			"  REQUEST_URI_TOO_LONG: 414,",
			"  UNSUPPORTED_MEDIA_TYPE: 415,",
			"  REQUESTED_RANGE_NOT_SATISFIABLE: 416,",
			"  EXPECTATION_FAILED: 417,",
			"  IM_A_TEAPOT: 418,",
			"  INSUFFICIENT_SPACE_ON_RESOURCE: 419,",
			"  METHOD_FAILURE: 420,",
			"  MISDIRECTED_REQUEST: 421,",
			"  UNPROCESSABLE_ENTITY: 422,",
			"  LOCKED: 423,",
			"  FAILED_DEPENDENCY: 424,",
			"  PRECONDITION_REQUIRED: 428,",
			"  TOO_MANY_REQUESTS: 429,",
			"  REQUEST_HEADER_FIELDS_TOO_LARGE: 431,",
			"  UNAVAILABLE_FOR_LEGAL_REASONS: 451,",
			"",
			"  // 5xx Server Errors",
			"  INTERNAL_SERVER_ERROR: 500,",
			"  NOT_IMPLEMENTED: 501,",
			"  BAD_GATEWAY: 502,",
			"  SERVICE_UNAVAILABLE: 503,",
			"  GATEWAY_TIMEOUT: 504,",
			"  HTTP_VERSION_NOT_SUPPORTED: 505,",
			"  INSUFFICIENT_STORAGE: 507,",
			"  NETWORK_AUTHENTICATION_REQUIRED: 511,",
			"};"
		],
		"description": "HTTP status codes utility with clean comments"
	},
	"Exception Utility": {
		"scope": "javascript,typescript",
		"prefix": "xception",
		"body": [
			"// 400 - Bad Request",
			"export class BadRequestException extends Error {",
			"  constructor(message = 'Bad Request Exception') {",
			"    super(message);",
			"    this.code = 400;",
			"  }",
			"}",
			"",
			"// 403 - Forbidden (refresh-token required)",
			"export class ForbiddenException extends Error {",
			"  constructor(message = 'Forbidden Exception') {",
			"    super(message);",
			"    this.code = 403;",
			"  }",
			"}",
			"",
			"// 401 - Unauthorized (logout required)",
			"export class UnauthorizedException extends Error {",
			"  constructor(message = 'Unauthorized Exception') {",
			"    super(message);",
			"    this.code = 401;",
			"  }",
			"}"
		],
		"description": "Custom exception classes for HTTP errors"
	},
	"Response Utility": {
		"scope": "javascript,typescript",
		"prefix": "xponse",
		"body": [
			"// Success response helper",
			"export const responseSuccess = (data, message = 'Success', code = 200) => {",
			"  return {",
			"    status: 'success',",
			"    statusCode: code,",
			"    message,",
			"    data,",
			"  };",
			"};",
			"",
			"// Error response helper",
			"export const responseError = (",
			"  error,",
			"  message = 'Internal Server Error',",
			"  code = 500,",
			"  stack = null",
			") => {",
			"  return {",
			"    status: 'error',",
			"    statusCode: code,",
			"    message,",
			"    error: error instanceof Error ? error.message : error,",
			"    stack,",
			"  };",
			"};"
		],
		"description": "Response utility functions for success and error responses"
	}
}
