{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Express Router Template": {
		"scope": "javascript,typescript",
		"prefix": "exp-router",
		"body": [
			"import express from 'express';",
			"",
			"const ${1:module}Router = express.Router();",
			"",
			"${1:module}Router.post('/', ${1:module}Controller.create);",
			"${1:module}Router.get('/', ${1:module}Controller.findAll);",
			"${1:module}Router.get('/:id', ${1:module}Controller.findOne);",
			"${1:module}Router.patch('/:id', ${1:module}Controller.update);",
			"${1:module}Router.delete('/:id', ${1:module}Controller.remove);",
			"",
			"export default ${1:module}Router;"
		],
		"description": "Create an Express.js router with standard CRUD routes"
	},
	"Express Controller Template": {
		"scope": "javascript,typescript",
		"prefix": "exp-controller",
		"body": [
			"export const ${1:module}Controller = {",
			"  create: async (req, res) => {",
			"    const result = await ${1:module}Service.create(req);",
			"    const response = responseSuccess(result, '${1/(.*)/${1:/capitalize} created successfully/}');",
			"    res.status(response.status).json(response);",
			"  },",
			"",
			"  findAll: async (req, res) => {",
			"    const result = await ${1:module}Service.findAll(req);",
			"    const response = responseSuccess(result, '${1/(.*)/${1:/capitalize}s retrieved successfully/}');",
			"    res.status(response.status).json(response);",
			"  },",
			"",
			"  findOne: async (req, res) => {",
			"    const result = await ${1:module}Service.findOne(req);",
			"    const response = responseSuccess(result, '${1/(.*)/${1:/capitalize} retrieved successfully/}');",
			"    res.status(response.status).json(response);",
			"  },",
			"",
			"  update: async (req, res) => {",
			"    const result = await ${1:module}Service.update(req);",
			"    const response = responseSuccess(result, '${1/(.*)/${1:/capitalize} updated successfully/}');",
			"    res.status(response.status).json(response);",
			"  },",
			"",
			"  remove: async (req, res) => {",
			"    const result = await ${1:module}Service.remove(req);",
			"    const response = responseSuccess(result, '${1/(.*)/${1:/capitalize} removed successfully/}');",
			"    res.status(response.status).json(response);",
			"  },",
			"};"
		],
		"description": "Create an Express.js controller with standard CRUD methods"
	},
	"Express Service Template": {
		"scope": "javascript,typescript",
		"prefix": "exp-service",
		"body": [
			"export const ${1:module}Service = {",
			"  create: async (req) => {",
			"    return `created`;",
			"  },",
			"  findAll: async (req) => {",
			"    return `all ${1:module}s`;",
			"  },",
			"  findOne: async (req) => {",
			"    return `one ${1:module} - \\${req.params.id}`;",
			"  },",
			"  update: async (req) => {",
			"    return `updated ${1:module} - \\${req.params.id}`;",
			"  },",
			"  remove: async (req) => {",
			"    return `removed ${1:module} - \\${req.params.id}`;",
			"  },",
			"};"
		],
		"description": "Create an Express.js service with standard CRUD methods"
	}
}